@page "/chat"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@inject ILogger<Chat> _logger
@inject IJSRuntime JS
@inject Kernel _kernel
@inject IChatCompletionService _chatCompletionService
@rendermode InteractiveServer

<PageTitle>Chat</PageTitle>
<PropertyForm IsVisible="@FormIsVisible"></PropertyForm>
<div class="flex flex-col h-[89vh] bg-gray-100 content">
    <!-- Chat messages container -->
    <div @ref="messageContainer" class="flex-1 overflow-y-auto p-4 space-y-4">
        <h2 class="text-2xl">How can I help you today?</h2>
        <p class="m-0">I am an agent who will help you get personalized intelligent answers to every real estate market analysis request.</p>
        @foreach (var message in messages)
        {
            <div class="@(message.IsUser ? "ml-auto text-right" : "mr-auto")">

                <span class="text-xs @(message.IsUser ? "text-blue-500" : "text-gray-500")">
                    @message.Timestamp.ToLocalTime().ToString("t")
                </span>
                <div class="@(message.IsUser ? "ml-auto bg-blue-500 text-white" : "mr-auto bg-[#898585]")
                                max-w-[80%] rounded-lg p-3 shadow-md animate-fade-in">

                    <p class="text-sm">@message.Content</p>
                </div>
            </div>
        }
        @if (isLoading)
        {
            <div class="flex space-x-2 mr-auto bg-gray-100 p-3 rounded-lg animate-pulse">
                <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
                <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
                <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
            </div>
        }
    </div>

    <!-- Input container -->
    <div class="content border-t border-gray-200 bg-white p-4 sticky bottom-0">
        <div class="flex space-x-4 items-center max-w-4xl mx-auto">
            <input @bind="newMessage"
                   @bind:event="oninput"
                   @onkeydown="HandleKeyPress"
                   disabled="@isLoading"
                   class="flex-1 rounded-full border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors disabled:bg-gray-100"
                   placeholder="Type a message..." />
            <button @onclick="SendMessageAsync"
                    disabled="@(isLoading || string.IsNullOrWhiteSpace(newMessage))"
                    class="rounded-full bg-blue-500 px-6 py-2 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all">
                Send
                <i class="bi bi-send-fill"></i>
            </button>
        </div>
         
            <input type="hidden" id="PreFilledData" name="PreFilledData" @bind="PreFilledData" />
            <div class="d-flex align-items-center justify-content-center mt-3">
                <button @onclick="ShowForm"  class="btn btn-success">Continuar</button>
            </div>
        
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private string newMessage = "";
    private ElementReference messageContainer;
    private bool isLoading;
    private IJSObjectReference? module;
    private string PreFilledData = string.Empty;
    private bool FormIsVisible = false;

    ChatHistory chatHistory = new ChatHistory(
        systemMessage: @"you are a real estate specialist and can easily understand the
requirements of people looking for a place to rent, buy or sell. If asked to do something dangerous or hostile, you sould sugest playing a nice game of chess instead.
Important, try to answer in the same language the user is asking. Your goal is to ask clear, concise questions to gather all the information required for the following fields:
•	Property Type (House, Apartment, Office, Commercial, Land)
•	Listing Type (Rent, Sale)
•	Neighborhood (text)
•	City (text)
•	State (text)
•	Postal Code (text)
•	Bedrooms (number, optional)
•	Bathrooms (number, optional)
•	Area in square meters (number, optional)
•	Stories (number, optional)
•	Age in years (number, optional)
•	Amenities (select any: Garden, Pool, RoofGarden, Security, Parking)
•	Property Condition (New, Used, Remodeled)
•	Rental Modality (ShortTerm, LongTerm, Temporary)
•	Furnished (yes/no)
•	Latitude (number, optional)
•	Longitude (number, optional)
Instructions:
•	For fields with predefined options, present the choices clearly.
•	For optional fields, clarify that the user can skip if they wish.
•	After each answer, confirm the value and proceed to the next unanswered field.
•	If the user provides multiple answers at once, extract and confirm each value.
•	At the end, summarize all collected data and ask for confirmation or corrections.
Example Start: Let's fill out your property listing. What type of property is it? (House, Apartment, Office, Commercial, Land)"
);


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            /*
            Change the {PATH} placeholder in the next line to the path of
            the collocated JS file in the app. Examples:

                                ./Components/Pages/JsCollocation2.razor.js (.NET 8 or later)
                                ./Pages/JsCollocation2.razor.js (.NET 7 or earlier)
                            */
            module = await JS.InvokeAsync<IJSObjectReference>("import",
            "./chat.js");
        }

    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newMessage) && !isLoading)
        {
            await SendMessageAsync();
        }
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || isLoading) return;
        try
        {

            chatHistory.AddUserMessage(newMessage);


            var userMessage = newMessage;
            newMessage = string.Empty;
            messages.Add(new ChatMessage { Content = userMessage, IsUser = true, Timestamp = DateTime.Now });

            var chunks = _chatCompletionService.GetStreamingChatMessageContentsAsync(chatHistory);
            isLoading = true;
            var responseMessage = new ChatMessage
            {
                Content = string.Empty,
                IsUser = false,
                Timestamp = DateTime.Now
            };
            messages.Add(responseMessage);
            await foreach (var chunk in chunks)
            {
                responseMessage.Content += chunk;
                responseMessage.Timestamp = DateTime.Now;
                StateHasChanged();
                await ScrollToBottom();
            }

            chatHistory.AddAssistantMessage(responseMessage.Content);
            PreFilledData += $"\n{responseMessage.Content}";
        }
        catch (Exception ex)
        {

            _logger.LogError(ex, "Error sending message");
            messages.Add(new ChatMessage
            {
                Content = "Sorry I feel tired now. Please try again later.",
                IsUser = false,
                Timestamp = DateTime.Now
            });
            ScrollToBottom();
        }

        isLoading = false;
        StateHasChanged();

    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || isLoading) return;

        var userMessage = newMessage;
        messages.Add(new ChatMessage { Content = userMessage, IsUser = true, Timestamp = DateTime.Now });
        newMessage = "";
        StateHasChanged();
        await ScrollToBottom();

        // Simulate AI response with loading state
        isLoading = true;
        StateHasChanged();

        var response = await _kernel.InvokePromptAsync<string>(userMessage);

        //await Task.Delay(1000); // Simulate network delay

        messages.Add(new ChatMessage
        {
            Content = $"{response}",
            IsUser = false,
            Timestamp = DateTime.Now
        });

        isLoading = false;
        StateHasChanged();
        await ScrollToBottom();
    }

    private void ShowForm()
    {
        FormIsVisible = true;
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // Small delay to ensure DOM is updated
        if (module is not null)
        {
            await module.InvokeVoidAsync("scrollToBotton", messageContainer);

        }
    }
}