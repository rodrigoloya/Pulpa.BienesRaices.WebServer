@page "/chat"
@inject IJSRuntime JS
@rendermode InteractiveServer
@using Pulpa.BienesRaices.WebServer.Models
<PageTitle>Chat</PageTitle>

<div class="flex flex-col h-[80vh] bg-gray-100">
    <!-- Chat messages container -->
    <div @ref="messageContainer" class="flex-1 overflow-y-auto p-4 space-y-4">
        <h2 class="text-2xl">How can I help you today?</h2>
        <p class="m-0">I am an agent who will help you get personalized intelligent answers to every real estate market analysis request.</p>
        @foreach (var message in messages)
        {
            <div  class="@(message.IsUser ? "ml-auto text-right" : "mr-auto")">

                <span class="text-xs @(message.IsUser ? "text-blue-500" : "text-gray-500")">
                    @message.Timestamp.ToLocalTime().ToString("t")
                </span>
                <div class="@(message.IsUser ? "ml-auto bg-blue-500 text-white" : "mr-auto bg-white")
                        max-w-[80%] rounded-lg p-3 shadow-md animate-fade-in">

                    <p class="text-sm">@message.Content</p>
                </div>
            </div>
        }
        @if (isLoading)
        {
            <div class="flex space-x-2 mr-auto bg-gray-100 p-3 rounded-lg animate-pulse">
                <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
                <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
                <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
            </div>
        }
    </div>

    <!-- Input container -->
    <div class="border-t border-gray-200 bg-white p-4 sticky bottom-0">
        <div class="flex space-x-4 items-center max-w-4xl mx-auto">
            <input @bind="newMessage"
                   @bind:event="oninput"
                   @onkeydown="HandleKeyPress"
                   disabled="@isLoading"
                   class="flex-1 rounded-full border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors disabled:bg-gray-100"
                   placeholder="Type a message..." />
            <button @onclick="SendMessage"
                    disabled="@(isLoading || string.IsNullOrWhiteSpace(newMessage))"
                    class="rounded-full bg-blue-500 px-6 py-2 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all">
                    Send
                <i class="bi bi-send-fill"></i>
            </button>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private string newMessage = "";
    private ElementReference messageContainer;
    private bool isLoading;
    private IJSObjectReference? module;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            /*
            Change the {PATH} placeholder in the next line to the path of
            the collocated JS file in the app. Examples:

                                ./Components/Pages/JsCollocation2.razor.js (.NET 8 or later)
                                ./Pages/JsCollocation2.razor.js (.NET 7 or earlier)
                            */
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./chat.js");
        }

    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newMessage) && !isLoading)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || isLoading) return;

        var userMessage = newMessage;
        messages.Add(new ChatMessage { Content = userMessage, IsUser = true, Timestamp = DateTime.Now });
        newMessage = "";
        StateHasChanged();
        await ScrollToBottom();

        // Simulate AI response with loading state
        isLoading = true;
        StateHasChanged();
        await Task.Delay(1000); // Simulate network delay

        messages.Add(new ChatMessage
            {
                Content = $"Echo: {userMessage}",
                IsUser = false
            });

        isLoading = false;
        StateHasChanged();
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // Small delay to ensure DOM is updated
        if (module is not null)
        {
            await module.InvokeVoidAsync("scrollToBotton", messageContainer);

        }
    }
}